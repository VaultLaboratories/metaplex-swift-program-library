/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Beet
import Solana

/**
 * @category Instructions
 * @category CloseEscrowAccount
 * @category generated
 */
public struct CloseEscrowAccountInstructionArgs{
    let instructionDiscriminator: [UInt8] /* size: 8 */
    

    public init(
        instructionDiscriminator: [UInt8] /* size: 8 */ = closeEscrowAccountInstructionDiscriminator
    ) {
        self.instructionDiscriminator = instructionDiscriminator
    }
}
/**
 * @category Instructions
 * @category CloseEscrowAccount
 * @category generated
 */
public let CloseEscrowAccountStruct = FixableBeetArgsStruct<CloseEscrowAccountInstructionArgs>(
    fields: [
        ("instructionDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        
    ],
    description: "CloseEscrowAccountInstructionArgs"
)
/**
* Accounts required by the _CloseEscrowAccount_ instruction
*
* @property [_writable_] escrow  
* @property [_writable_] metadata  
* @property [] mint  
* @property [] tokenAccount  
* @property [] edition  
* @property [_writable_, **signer**] payer  
* @property [] sysvarInstructions   
* @category Instructions
* @category CloseEscrowAccount
* @category generated
*/
public struct CloseEscrowAccountInstructionAccounts {
    let escrow: PublicKey
    let metadata: PublicKey
    let mint: PublicKey
    let tokenAccount: PublicKey
    let edition: PublicKey
    let payer: PublicKey
    let systemProgram: PublicKey?
    let sysvarInstructions: PublicKey

    public init(
        escrow: PublicKey,
        metadata: PublicKey,
        mint: PublicKey,
        tokenAccount: PublicKey,
        edition: PublicKey,
        payer: PublicKey,
        systemProgram: PublicKey? = nil,
        sysvarInstructions: PublicKey
    ) {
        self.escrow = escrow
        self.metadata = metadata
        self.mint = mint
        self.tokenAccount = tokenAccount
        self.edition = edition
        self.payer = payer
        self.systemProgram = systemProgram
        self.sysvarInstructions = sysvarInstructions
    }
}

public let closeEscrowAccountInstructionDiscriminator = [209, 42, 208, 179, 140, 78, 18, 43] as [UInt8]

/**
* Creates a _CloseEscrowAccount_ instruction.
*
* @param accounts that will be accessed while the instruction is processed
* @category Instructions
* @category CloseEscrowAccount
* @category generated
*/
public func createCloseEscrowAccountInstruction(accounts: CloseEscrowAccountInstructionAccounts, 
programId: PublicKey=PublicKey(string: "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")!) -> TransactionInstruction {

    let data = CloseEscrowAccountStruct.serialize(
            instance: ["instructionDiscriminator": closeEscrowAccountInstructionDiscriminator ])

    let keys: [AccountMeta] = [
        AccountMeta(
            publicKey: accounts.escrow,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.metadata,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.mint,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.tokenAccount,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.edition,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.payer,
            isSigner: true,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.systemProgram ?? PublicKey.systemProgramId,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.sysvarInstructions,
            isSigner: false,
            isWritable: false
        )
    ]

    let ix = TransactionInstruction(
                keys: keys,
                programId: programId,
                data: data.0.bytes
            )
    return ix
}