/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Solana
import Beet

/**
 * @category Instructions
 * @category Mint
 * @category generated
 */
public struct MintInstructionArgs{
    let instructionDiscriminator: [UInt8] /* size: 8 */
    let mintArgs: MintArgs

    public init(
        instructionDiscriminator: [UInt8] /* size: 8 */ = mintInstructionDiscriminator,
        mintArgs: MintArgs
    ) {
        self.instructionDiscriminator = instructionDiscriminator
        self.mintArgs = mintArgs
    }
}
/**
 * @category Instructions
 * @category Mint
 * @category generated
 */
public let MintStruct = FixableBeetArgsStruct<MintInstructionArgs>(
    fields: [
        ("instructionDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        ("mintArgs", mintArgsBeetWrapped)
    ],
    description: "MintInstructionArgs"
)
/**
* Accounts required by the _Mint_ instruction
*
* @property [_writable_] token  
* @property [] tokenOwner (optional)  
* @property [] metadata  
* @property [] masterEdition (optional)  
* @property [_writable_] tokenRecord (optional)  
* @property [_writable_] mint  
* @property [**signer**] authority  
* @property [] delegateRecord (optional)  
* @property [_writable_, **signer**] payer  
* @property [] sysvarInstructions  
* @property [] splTokenProgram  
* @property [] splAtaProgram  
* @property [] authorizationRulesProgram (optional)  
* @property [] authorizationRules (optional)   
* @category Instructions
* @category Mint
* @category generated
*/
public struct MintInstructionAccounts {
    let token: PublicKey
    let tokenOwner: PublicKey?
    let metadata: PublicKey
    let masterEdition: PublicKey?
    let tokenRecord: PublicKey?
    let mint: PublicKey
    let authority: PublicKey
    let delegateRecord: PublicKey?
    let payer: PublicKey
    let systemProgram: PublicKey?
    let sysvarInstructions: PublicKey
    let splTokenProgram: PublicKey
    let splAtaProgram: PublicKey
    let authorizationRulesProgram: PublicKey?
    let authorizationRules: PublicKey?

    public init(
        token: PublicKey,
        tokenOwner: PublicKey? = nil,
        metadata: PublicKey,
        masterEdition: PublicKey? = nil,
        tokenRecord: PublicKey? = nil,
        mint: PublicKey,
        authority: PublicKey,
        delegateRecord: PublicKey? = nil,
        payer: PublicKey,
        systemProgram: PublicKey? = nil,
        sysvarInstructions: PublicKey,
        splTokenProgram: PublicKey,
        splAtaProgram: PublicKey,
        authorizationRulesProgram: PublicKey? = nil,
        authorizationRules: PublicKey? = nil
    ) {
        self.token = token
        self.tokenOwner = tokenOwner
        self.metadata = metadata
        self.masterEdition = masterEdition
        self.tokenRecord = tokenRecord
        self.mint = mint
        self.authority = authority
        self.delegateRecord = delegateRecord
        self.payer = payer
        self.systemProgram = systemProgram
        self.sysvarInstructions = sysvarInstructions
        self.splTokenProgram = splTokenProgram
        self.splAtaProgram = splAtaProgram
        self.authorizationRulesProgram = authorizationRulesProgram
        self.authorizationRules = authorizationRules
    }
}

public let mintInstructionDiscriminator = [51, 57, 225, 47, 182, 146, 137, 166] as [UInt8]

/**
* Creates a _Mint_ instruction.
*
* @param accounts that will be accessed while the instruction is processed
  * @param args to provide as instruction data to the program
 * 
* @category Instructions
* @category Mint
* @category generated
*/
public func createMintInstruction(accounts: MintInstructionAccounts, 
args: MintInstructionArgs, programId: PublicKey=PublicKey(string: "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")!) -> TransactionInstruction {

    let data = MintStruct.serialize(
            instance: ["instructionDiscriminator": mintInstructionDiscriminator,
"mintArgs": args.mintArgs])

    var keys: [AccountMeta] = [
        AccountMeta(
            publicKey: accounts.token,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.metadata,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.mint,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.authority,
            isSigner: true,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.payer,
            isSigner: true,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.systemProgram ?? PublicKey.systemProgramId,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.sysvarInstructions,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.splTokenProgram,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.splAtaProgram,
            isSigner: false,
            isWritable: false
        )
    ]
    if accounts.tokenOwner != nil {
        
        keys.append(
            AccountMeta(
                publicKey: accounts.tokenOwner!,
                isSigner: false,
                isWritable: false
            )
        )
    }  else {
        keys.append(
            AccountMeta(
                publicKey: programId,
                isSigner: false,
                isWritable: false
            )
        )
    }
    if accounts.masterEdition != nil {
        if accounts.tokenOwner == nil { fatalError("When providing masterEdition accounts.tokenOwner need(s) to be provided as well.") }
        keys.append(
            AccountMeta(
                publicKey: accounts.masterEdition!,
                isSigner: false,
                isWritable: false
            )
        )
    }  else {
        keys.append(
            AccountMeta(
                publicKey: programId,
                isSigner: false,
                isWritable: false
            )
        )
    }
    if accounts.tokenRecord != nil {
        if accounts.tokenOwner == nil || accounts.masterEdition == nil { fatalError("When providing tokenRecord accounts.tokenOwner, accounts.masterEdition need(s) to be provided as well.") }
        keys.append(
            AccountMeta(
                publicKey: accounts.tokenRecord!,
                isSigner: false,
                isWritable: true
            )
        )
    }  else {
        keys.append(
            AccountMeta(
                publicKey: programId,
                isSigner: false,
                isWritable: false
            )
        )
    }
    if accounts.delegateRecord != nil {
        if accounts.tokenOwner == nil || accounts.masterEdition == nil || accounts.tokenRecord == nil { fatalError("When providing delegateRecord accounts.tokenOwner, accounts.masterEdition, accounts.tokenRecord need(s) to be provided as well.") }
        keys.append(
            AccountMeta(
                publicKey: accounts.delegateRecord!,
                isSigner: false,
                isWritable: false
            )
        )
    }  else {
        keys.append(
            AccountMeta(
                publicKey: programId,
                isSigner: false,
                isWritable: false
            )
        )
    }
    if accounts.authorizationRulesProgram != nil {
        if accounts.tokenOwner == nil || accounts.masterEdition == nil || accounts.tokenRecord == nil || accounts.delegateRecord == nil { fatalError("When providing authorizationRulesProgram accounts.tokenOwner, accounts.masterEdition, accounts.tokenRecord, accounts.delegateRecord need(s) to be provided as well.") }
        keys.append(
            AccountMeta(
                publicKey: accounts.authorizationRulesProgram!,
                isSigner: false,
                isWritable: false
            )
        )
    }  else {
        keys.append(
            AccountMeta(
                publicKey: programId,
                isSigner: false,
                isWritable: false
            )
        )
    }
    if accounts.authorizationRules != nil {
        if accounts.tokenOwner == nil || accounts.masterEdition == nil || accounts.tokenRecord == nil || accounts.delegateRecord == nil || accounts.authorizationRulesProgram == nil { fatalError("When providing authorizationRules accounts.tokenOwner, accounts.masterEdition, accounts.tokenRecord, accounts.delegateRecord, accounts.authorizationRulesProgram need(s) to be provided as well.") }
        keys.append(
            AccountMeta(
                publicKey: accounts.authorizationRules!,
                isSigner: false,
                isWritable: false
            )
        )
    }  else {
        keys.append(
            AccountMeta(
                publicKey: programId,
                isSigner: false,
                isWritable: false
            )
        )
    }

    let ix = TransactionInstruction(
                keys: keys,
                programId: programId,
                data: data.0.bytes
            )
    return ix
}