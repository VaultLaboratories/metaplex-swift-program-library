/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Solana
import Beet

/**
 * @category Instructions
 * @category Update
 * @category generated
 */
public struct UpdateInstructionArgs{
    let instructionDiscriminator: [UInt8] /* size: 8 */
    let updateArgs: UpdateArgs

    public init(
        instructionDiscriminator: [UInt8] /* size: 8 */ = updateInstructionDiscriminator,
        updateArgs: UpdateArgs
    ) {
        self.instructionDiscriminator = instructionDiscriminator
        self.updateArgs = updateArgs
    }
}
/**
 * @category Instructions
 * @category Update
 * @category generated
 */
public let UpdateStruct = FixableBeetArgsStruct<UpdateInstructionArgs>(
    fields: [
        ("instructionDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        ("updateArgs", updateArgsBeetWrapped)
    ],
    description: "UpdateInstructionArgs"
)
/**
* Accounts required by the _Update_ instruction
*
* @property [**signer**] authority  
* @property [] delegateRecord (optional)  
* @property [] token (optional)  
* @property [] mint  
* @property [_writable_] metadata  
* @property [_writable_] edition (optional)  
* @property [_writable_, **signer**] payer  
* @property [] sysvarInstructions  
* @property [] authorizationRulesProgram (optional)  
* @property [] authorizationRules (optional)   
* @category Instructions
* @category Update
* @category generated
*/
public struct UpdateInstructionAccounts {
    let authority: PublicKey
    let delegateRecord: PublicKey?
    let token: PublicKey?
    let mint: PublicKey
    let metadata: PublicKey
    let edition: PublicKey?
    let payer: PublicKey
    let systemProgram: PublicKey?
    let sysvarInstructions: PublicKey
    let authorizationRulesProgram: PublicKey?
    let authorizationRules: PublicKey?

    public init(
        authority: PublicKey,
        delegateRecord: PublicKey? = nil,
        token: PublicKey? = nil,
        mint: PublicKey,
        metadata: PublicKey,
        edition: PublicKey? = nil,
        payer: PublicKey,
        systemProgram: PublicKey? = nil,
        sysvarInstructions: PublicKey,
        authorizationRulesProgram: PublicKey? = nil,
        authorizationRules: PublicKey? = nil
    ) {
        self.authority = authority
        self.delegateRecord = delegateRecord
        self.token = token
        self.mint = mint
        self.metadata = metadata
        self.edition = edition
        self.payer = payer
        self.systemProgram = systemProgram
        self.sysvarInstructions = sysvarInstructions
        self.authorizationRulesProgram = authorizationRulesProgram
        self.authorizationRules = authorizationRules
    }
}

public let updateInstructionDiscriminator = [219, 200, 88, 176, 158, 63, 253, 127] as [UInt8]

/**
* Creates a _Update_ instruction.
*
* @param accounts that will be accessed while the instruction is processed
  * @param args to provide as instruction data to the program
 * 
* @category Instructions
* @category Update
* @category generated
*/
public func createUpdateInstruction(accounts: UpdateInstructionAccounts, 
args: UpdateInstructionArgs, programId: PublicKey=PublicKey(string: "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")!) -> TransactionInstruction {

    let data = UpdateStruct.serialize(
            instance: ["instructionDiscriminator": updateInstructionDiscriminator,
"updateArgs": args.updateArgs])

    var keys: [AccountMeta] = [
        AccountMeta(
            publicKey: accounts.authority,
            isSigner: true,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.mint,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.metadata,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.payer,
            isSigner: true,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.systemProgram ?? PublicKey.systemProgramId,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.sysvarInstructions,
            isSigner: false,
            isWritable: false
        )
    ]
    if accounts.delegateRecord != nil {
        
        keys.append(
            AccountMeta(
                publicKey: accounts.delegateRecord!,
                isSigner: false,
                isWritable: false
            )
        )
    }  else {
        keys.append(
            AccountMeta(
                publicKey: programId,
                isSigner: false,
                isWritable: false
            )
        )
    }
    if accounts.token != nil {
        if accounts.delegateRecord == nil { fatalError("When providing token accounts.delegateRecord need(s) to be provided as well.") }
        keys.append(
            AccountMeta(
                publicKey: accounts.token!,
                isSigner: false,
                isWritable: false
            )
        )
    }  else {
        keys.append(
            AccountMeta(
                publicKey: programId,
                isSigner: false,
                isWritable: false
            )
        )
    }
    if accounts.edition != nil {
        if accounts.delegateRecord == nil || accounts.token == nil { fatalError("When providing edition accounts.delegateRecord, accounts.token need(s) to be provided as well.") }
        keys.append(
            AccountMeta(
                publicKey: accounts.edition!,
                isSigner: false,
                isWritable: true
            )
        )
    }  else {
        keys.append(
            AccountMeta(
                publicKey: programId,
                isSigner: false,
                isWritable: false
            )
        )
    }
    if accounts.authorizationRulesProgram != nil {
        if accounts.delegateRecord == nil || accounts.token == nil || accounts.edition == nil { fatalError("When providing authorizationRulesProgram accounts.delegateRecord, accounts.token, accounts.edition need(s) to be provided as well.") }
        keys.append(
            AccountMeta(
                publicKey: accounts.authorizationRulesProgram!,
                isSigner: false,
                isWritable: false
            )
        )
    }  else {
        keys.append(
            AccountMeta(
                publicKey: programId,
                isSigner: false,
                isWritable: false
            )
        )
    }
    if accounts.authorizationRules != nil {
        if accounts.delegateRecord == nil || accounts.token == nil || accounts.edition == nil || accounts.authorizationRulesProgram == nil { fatalError("When providing authorizationRules accounts.delegateRecord, accounts.token, accounts.edition, accounts.authorizationRulesProgram need(s) to be provided as well.") }
        keys.append(
            AccountMeta(
                publicKey: accounts.authorizationRules!,
                isSigner: false,
                isWritable: false
            )
        )
    }  else {
        keys.append(
            AccountMeta(
                publicKey: programId,
                isSigner: false,
                isWritable: false
            )
        )
    }

    let ix = TransactionInstruction(
                keys: keys,
                programId: programId,
                data: data.0.bytes
            )
    return ix
}