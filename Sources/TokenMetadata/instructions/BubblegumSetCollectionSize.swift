/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Beet
import Solana

/**
 * @category Instructions
 * @category BubblegumSetCollectionSize
 * @category generated
 */
public struct BubblegumSetCollectionSizeInstructionArgs{
    let instructionDiscriminator: [UInt8] /* size: 8 */
    let setCollectionSizeArgs: SetCollectionSizeArgs

    public init(
        instructionDiscriminator: [UInt8] /* size: 8 */ = bubblegumSetCollectionSizeInstructionDiscriminator,
        setCollectionSizeArgs: SetCollectionSizeArgs
    ) {
        self.instructionDiscriminator = instructionDiscriminator
        self.setCollectionSizeArgs = setCollectionSizeArgs
    }
}
/**
 * @category Instructions
 * @category BubblegumSetCollectionSize
 * @category generated
 */
public let BubblegumSetCollectionSizeStruct = FixableBeetArgsStruct<BubblegumSetCollectionSizeInstructionArgs>(
    fields: [
        ("instructionDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        ("setCollectionSizeArgs", setCollectionSizeArgsBeetWrapped)
    ],
    description: "BubblegumSetCollectionSizeInstructionArgs"
)
/**
* Accounts required by the _BubblegumSetCollectionSize_ instruction
*
* @property [_writable_] collectionMetadata  
* @property [_writable_, **signer**] collectionAuthority  
* @property [] collectionMint  
* @property [**signer**] bubblegumSigner  
* @property [] collectionAuthorityRecord (optional)   
* @category Instructions
* @category BubblegumSetCollectionSize
* @category generated
*/
public struct BubblegumSetCollectionSizeInstructionAccounts {
    let collectionMetadata: PublicKey
    let collectionAuthority: PublicKey
    let collectionMint: PublicKey
    let bubblegumSigner: PublicKey
    let collectionAuthorityRecord: PublicKey?

    public init(
        collectionMetadata: PublicKey,
        collectionAuthority: PublicKey,
        collectionMint: PublicKey,
        bubblegumSigner: PublicKey,
        collectionAuthorityRecord: PublicKey? = nil
    ) {
        self.collectionMetadata = collectionMetadata
        self.collectionAuthority = collectionAuthority
        self.collectionMint = collectionMint
        self.bubblegumSigner = bubblegumSigner
        self.collectionAuthorityRecord = collectionAuthorityRecord
    }
}

public let bubblegumSetCollectionSizeInstructionDiscriminator = [230, 215, 231, 226, 156, 188, 56, 6] as [UInt8]

/**
* Creates a _BubblegumSetCollectionSize_ instruction.
*
* @param accounts that will be accessed while the instruction is processed
  * @param args to provide as instruction data to the program
 * 
* @category Instructions
* @category BubblegumSetCollectionSize
* @category generated
*/
public func createBubblegumSetCollectionSizeInstruction(accounts: BubblegumSetCollectionSizeInstructionAccounts, 
args: BubblegumSetCollectionSizeInstructionArgs, programId: PublicKey=PublicKey(string: "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")!) -> TransactionInstruction {

    let data = BubblegumSetCollectionSizeStruct.serialize(
            instance: ["instructionDiscriminator": bubblegumSetCollectionSizeInstructionDiscriminator,
"setCollectionSizeArgs": args.setCollectionSizeArgs])

    var keys: [AccountMeta] = [
        AccountMeta(
            publicKey: accounts.collectionMetadata,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.collectionAuthority,
            isSigner: true,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.collectionMint,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.bubblegumSigner,
            isSigner: true,
            isWritable: false
        )
    ]
    if accounts.collectionAuthorityRecord != nil {
        
        keys.append(
            AccountMeta(
                publicKey: accounts.collectionAuthorityRecord!,
                isSigner: false,
                isWritable: false
            )
        )
    } 

    let ix = TransactionInstruction(
                keys: keys,
                programId: programId,
                data: data.0.bytes
            )
    return ix
}