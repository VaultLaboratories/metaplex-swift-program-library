/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Beet
import Solana

/**
 * @category Instructions
 * @category TransferOutOfEscrow
 * @category generated
 */
public struct TransferOutOfEscrowInstructionArgs{
    let instructionDiscriminator: [UInt8] /* size: 8 */
    let transferOutOfEscrowArgs: TransferOutOfEscrowArgs

    public init(
        instructionDiscriminator: [UInt8] /* size: 8 */ = transferOutOfEscrowInstructionDiscriminator,
        transferOutOfEscrowArgs: TransferOutOfEscrowArgs
    ) {
        self.instructionDiscriminator = instructionDiscriminator
        self.transferOutOfEscrowArgs = transferOutOfEscrowArgs
    }
}
/**
 * @category Instructions
 * @category TransferOutOfEscrow
 * @category generated
 */
public let TransferOutOfEscrowStruct = FixableBeetArgsStruct<TransferOutOfEscrowInstructionArgs>(
    fields: [
        ("instructionDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        ("transferOutOfEscrowArgs", transferOutOfEscrowArgsBeetWrapped)
    ],
    description: "TransferOutOfEscrowInstructionArgs"
)
/**
* Accounts required by the _TransferOutOfEscrow_ instruction
*
* @property [] escrow  
* @property [_writable_] metadata  
* @property [_writable_, **signer**] payer  
* @property [] attributeMint  
* @property [_writable_] attributeSrc  
* @property [_writable_] attributeDst  
* @property [] escrowMint  
* @property [] escrowAccount  
* @property [] sysvarInstructions  
* @property [**signer**] authority (optional)   
* @category Instructions
* @category TransferOutOfEscrow
* @category generated
*/
public struct TransferOutOfEscrowInstructionAccounts {
    let escrow: PublicKey
    let metadata: PublicKey
    let payer: PublicKey
    let attributeMint: PublicKey
    let attributeSrc: PublicKey
    let attributeDst: PublicKey
    let escrowMint: PublicKey
    let escrowAccount: PublicKey
    let systemProgram: PublicKey?
    let ataProgram: PublicKey?
    let tokenProgram: PublicKey?
    let sysvarInstructions: PublicKey
    let authority: PublicKey?

    public init(
        escrow: PublicKey,
        metadata: PublicKey,
        payer: PublicKey,
        attributeMint: PublicKey,
        attributeSrc: PublicKey,
        attributeDst: PublicKey,
        escrowMint: PublicKey,
        escrowAccount: PublicKey,
        systemProgram: PublicKey? = nil,
        ataProgram: PublicKey? = nil,
        tokenProgram: PublicKey? = nil,
        sysvarInstructions: PublicKey,
        authority: PublicKey? = nil
    ) {
        self.escrow = escrow
        self.metadata = metadata
        self.payer = payer
        self.attributeMint = attributeMint
        self.attributeSrc = attributeSrc
        self.attributeDst = attributeDst
        self.escrowMint = escrowMint
        self.escrowAccount = escrowAccount
        self.systemProgram = systemProgram
        self.ataProgram = ataProgram
        self.tokenProgram = tokenProgram
        self.sysvarInstructions = sysvarInstructions
        self.authority = authority
    }
}

public let transferOutOfEscrowInstructionDiscriminator = [55, 186, 186, 216, 115, 158, 58, 153] as [UInt8]

/**
* Creates a _TransferOutOfEscrow_ instruction.
*
* @param accounts that will be accessed while the instruction is processed
  * @param args to provide as instruction data to the program
 * 
* @category Instructions
* @category TransferOutOfEscrow
* @category generated
*/
public func createTransferOutOfEscrowInstruction(accounts: TransferOutOfEscrowInstructionAccounts, 
args: TransferOutOfEscrowInstructionArgs, programId: PublicKey=PublicKey(string: "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")!) -> TransactionInstruction {

    let data = TransferOutOfEscrowStruct.serialize(
            instance: ["instructionDiscriminator": transferOutOfEscrowInstructionDiscriminator,
"transferOutOfEscrowArgs": args.transferOutOfEscrowArgs])

    var keys: [AccountMeta] = [
        AccountMeta(
            publicKey: accounts.escrow,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.metadata,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.payer,
            isSigner: true,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.attributeMint,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.attributeSrc,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.attributeDst,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.escrowMint,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.escrowAccount,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.systemProgram ?? PublicKey.systemProgramId,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.ataProgram ?? PublicKey.splAssociatedTokenAccountProgramId,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.tokenProgram ?? PublicKey.tokenProgramId,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.sysvarInstructions,
            isSigner: false,
            isWritable: false
        )
    ]
    if accounts.authority != nil {
        
        keys.append(
            AccountMeta(
                publicKey: accounts.authority!,
                isSigner: true,
                isWritable: false
            )
        )
    } 

    let ix = TransactionInstruction(
                keys: keys,
                programId: programId,
                data: data.0.bytes
            )
    return ix
}