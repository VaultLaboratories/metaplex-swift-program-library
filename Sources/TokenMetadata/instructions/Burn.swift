/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Beet
import Solana

/**
 * @category Instructions
 * @category Burn
 * @category generated
 */
public struct BurnInstructionArgs{
    let instructionDiscriminator: [UInt8] /* size: 8 */
    let burnArgs: BurnArgs

    public init(
        instructionDiscriminator: [UInt8] /* size: 8 */ = burnInstructionDiscriminator,
        burnArgs: BurnArgs
    ) {
        self.instructionDiscriminator = instructionDiscriminator
        self.burnArgs = burnArgs
    }
}
/**
 * @category Instructions
 * @category Burn
 * @category generated
 */
public let BurnStruct = FixableBeetArgsStruct<BurnInstructionArgs>(
    fields: [
        ("instructionDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        ("burnArgs", burnArgsBeetWrapped)
    ],
    description: "BurnInstructionArgs"
)
/**
* Accounts required by the _Burn_ instruction
*
* @property [_writable_] metadata  
* @property [_writable_, **signer**] owner  
* @property [_writable_] mint  
* @property [_writable_] tokenAccount  
* @property [_writable_] masterEditionAccount  
* @property [] splTokenProgram  
* @property [_writable_] collectionMetadata (optional)  
* @property [] authorizationRules (optional)  
* @property [] authorizationRulesProgram (optional)   
* @category Instructions
* @category Burn
* @category generated
*/
public struct BurnInstructionAccounts {
    let metadata: PublicKey
    let owner: PublicKey
    let mint: PublicKey
    let tokenAccount: PublicKey
    let masterEditionAccount: PublicKey
    let splTokenProgram: PublicKey
    let collectionMetadata: PublicKey?
    let authorizationRules: PublicKey?
    let authorizationRulesProgram: PublicKey?

    public init(
        metadata: PublicKey,
        owner: PublicKey,
        mint: PublicKey,
        tokenAccount: PublicKey,
        masterEditionAccount: PublicKey,
        splTokenProgram: PublicKey,
        collectionMetadata: PublicKey? = nil,
        authorizationRules: PublicKey? = nil,
        authorizationRulesProgram: PublicKey? = nil
    ) {
        self.metadata = metadata
        self.owner = owner
        self.mint = mint
        self.tokenAccount = tokenAccount
        self.masterEditionAccount = masterEditionAccount
        self.splTokenProgram = splTokenProgram
        self.collectionMetadata = collectionMetadata
        self.authorizationRules = authorizationRules
        self.authorizationRulesProgram = authorizationRulesProgram
    }
}

public let burnInstructionDiscriminator = [116, 110, 29, 56, 107, 219, 42, 93] as [UInt8]

/**
* Creates a _Burn_ instruction.
*
* @param accounts that will be accessed while the instruction is processed
  * @param args to provide as instruction data to the program
 * 
* @category Instructions
* @category Burn
* @category generated
*/
public func createBurnInstruction(accounts: BurnInstructionAccounts, 
args: BurnInstructionArgs, programId: PublicKey=PublicKey(string: "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")!) -> TransactionInstruction {

    let data = BurnStruct.serialize(
            instance: ["instructionDiscriminator": burnInstructionDiscriminator,
"burnArgs": args.burnArgs])

    var keys: [AccountMeta] = [
        AccountMeta(
            publicKey: accounts.metadata,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.owner,
            isSigner: true,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.mint,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.tokenAccount,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.masterEditionAccount,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.splTokenProgram,
            isSigner: false,
            isWritable: false
        )
    ]
    if accounts.collectionMetadata != nil {
        
        keys.append(
            AccountMeta(
                publicKey: accounts.collectionMetadata!,
                isSigner: false,
                isWritable: true
            )
        )
    }  else {
        keys.append(
            AccountMeta(
                publicKey: programId,
                isSigner: false,
                isWritable: false
            )
        )
    }
    if accounts.authorizationRules != nil {
        if accounts.collectionMetadata == nil { fatalError("When providing authorizationRules accounts.collectionMetadata need(s) to be provided as well.") }
        keys.append(
            AccountMeta(
                publicKey: accounts.authorizationRules!,
                isSigner: false,
                isWritable: false
            )
        )
    }  else {
        keys.append(
            AccountMeta(
                publicKey: programId,
                isSigner: false,
                isWritable: false
            )
        )
    }
    if accounts.authorizationRulesProgram != nil {
        if accounts.collectionMetadata == nil || accounts.authorizationRules == nil { fatalError("When providing authorizationRulesProgram accounts.collectionMetadata, accounts.authorizationRules need(s) to be provided as well.") }
        keys.append(
            AccountMeta(
                publicKey: accounts.authorizationRulesProgram!,
                isSigner: false,
                isWritable: false
            )
        )
    }  else {
        keys.append(
            AccountMeta(
                publicKey: programId,
                isSigner: false,
                isWritable: false
            )
        )
    }

    let ix = TransactionInstruction(
                keys: keys,
                programId: programId,
                data: data.0.bytes
            )
    return ix
}