/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import BeetSolana
import Solana
import Beet


/**
* Arguments used to create {@link Tokenrecord}
* @category Accounts
* @category generated
*/
public protocol TokenrecordArgs {
    
     var key: Key { get }
     var bump: UInt8 { get }
     var state: TokenState { get }
     var ruleSetRevision: COption<UInt64> { get }
     var delegate: COption<PublicKey> { get }
     var delegateRole: COption<TokenDelegateRole> { get }
}

/**
 * Holds the data for the {@link Tokenrecord} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
public struct Tokenrecord: TokenrecordArgs {
  

  public let key: Key
  public let bump: UInt8
  public let state: TokenState
  public let ruleSetRevision: COption<UInt64>
  public let delegate: COption<PublicKey>
  public let delegateRole: COption<TokenDelegateRole>

  /**
   * Creates a {@link Tokenrecord} instance from the provided args.
   */
  public static func fromArgs(args: Args) -> Tokenrecord {
    return Tokenrecord(
        key: args["key"] as! Key,
        bump: args["bump"] as! UInt8,
        state: args["state"] as! TokenState,
        ruleSetRevision: args["ruleSetRevision"] as! COption<UInt64>,
        delegate: args["delegate"] as! COption<PublicKey>,
        delegateRole: args["delegateRole"] as! COption<TokenDelegateRole>
    )
  }
  /**
   * Deserializes the {@link Tokenrecord} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  public static func fromAccountInfo(
    accountInfo: Foundation.Data,
    offset:Int=0
  ) -> ( Tokenrecord, Int )  {
    return Tokenrecord.deserialize(buf: accountInfo, offset: offset)
  }
  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Tokenrecord} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  public static func fromAccountAddress(
    connection: Api,
    address: PublicKey,
    onComplete: @escaping (Result<Tokenrecord, Error>) -> Void
  ) {
    connection.getAccountInfo(account: address.base58EncodedString) { result in
        switch result {
            case .success(let pureData):
                if let data = pureData.data?.value {
                    onComplete(.success(Tokenrecord.deserialize(buf: data).0))
                } else {
                    onComplete(.failure(SolanaError.nullValue))
                }
            case .failure(let error):
                onComplete(.failure(error))
        }
    }
  }
  /**
   * Deserializes the {@link Tokenrecord} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  public static func deserialize(
    buf: Foundation.Data,
    offset: Int = 0
  ) -> ( Tokenrecord, Int ) {
    return tokenRecordBeet.deserialize(buffer: buf, offset: offset)
  }
  /**
   * Serializes the {@link Tokenrecord} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  public func serialize() -> ( Foundation.Data, Int ) {
    return tokenRecordBeet.serialize(instance: [
        "key" : self.key,
        "bump" : self.bump,
        "state" : self.state,
        "ruleSetRevision" : self.ruleSetRevision,
        "delegate" : self.delegate,
        "delegateRole" : self.delegateRole
        ])
  }
  /**
* Returns the byteSize of a {@link Buffer} holding the serialized data of
* {@link Tokenrecord} for the provided args.
*
* @param args need to be provided since the byte size for this account
* depends on them
*/
static func byteSize(args: TokenrecordArgs) -> UInt64 {
    return UInt64(tokenRecordBeet.toFixedFromValue(val: args).byteSize)
}
/**
* Fetches the minimum balance needed to exempt an account holding
* {@link Tokenrecord} data from rent
*
* @param args need to be provided since the byte size for this account
* depends on them
* @param connection used to retrieve the rent exemption information
*/
static func getMinimumBalanceForRentExemption(
    args: TokenrecordArgs,
    connection: Api,
    commitment: Commitment?,
    onComplete: @escaping(Result<UInt64, Error>) -> Void
) {
    return connection.getMinimumBalanceForRentExemption(dataLength: Tokenrecord.byteSize(args: args), commitment: commitment, onComplete: onComplete)
}
}
  /**
   * @category Accounts
   * @category generated
   */
  public let tokenRecordBeet = FixableBeetStruct<Tokenrecord>(
    fields:[
        
        ("key", keyBeetWrapped),
        ("bump", Beet.fixedBeet(.init(value: .scalar(u8())))),
        ("state", tokenStateBeetWrapped),
        ("ruleSetRevision", Beet.fixableBeat(coption(inner: Beet.fixedBeet(.init(value: .scalar(u64())))))),
        ("delegate", Beet.fixableBeat(coption(inner: Beet.fixedBeet(.init(value: .scalar(BeetPublicKey())))))),
        ("delegateRole", Beet.fixableBeat(coption(inner: tokenDelegateRoleBeetWrapped)))
    ],
    construct: Tokenrecord.fromArgs,
    description: "Tokenrecord"
)
